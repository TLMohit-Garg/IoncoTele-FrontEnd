import {
  init_useFormControl,
  useFormControl
} from "./chunk-66MMWWDA.js";
import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-L5VP4CKK.js";
import {
  init_useControlled,
  useControlled_default
} from "./chunk-6TG3HE6N.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-SFPOK23C.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-CXFVI2QO.js";
import {
  init_DefaultPropsProvider,
  useDefaultProps
} from "./chunk-3GLM6OA2.js";
import {
  init_styled,
  rootShouldForwardProp_default,
  styled_default
} from "./chunk-K2HJPGKG.js";
import {
  require_colorManipulator
} from "./chunk-BWBWUQL5.js";
import {
  init_refType,
  refType_default
} from "./chunk-E3UFILMW.js";
import {
  _objectWithoutPropertiesLoose,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_composeClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  init_objectWithoutPropertiesLoose
} from "./chunk-SQEFYUZP.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-UQO5242Q.js";
import {
  require_prop_types
} from "./chunk-J4LPPHPF.js";
import {
  _extends,
  init_extends
} from "./chunk-Q7CPF5VB.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/material/internal/switchBaseClasses.js
function getSwitchBaseUtilityClass(slot) {
  return generateUtilityClass("PrivateSwitchBase", slot);
}
var switchBaseClasses;
var init_switchBaseClasses = __esm({
  "node_modules/@mui/material/internal/switchBaseClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
  }
});

// node_modules/@mui/material/internal/SwitchBase.js
var React, import_prop_types, import_jsx_runtime, import_jsx_runtime2, _excluded, useUtilityClasses, SwitchBaseRoot, SwitchBaseInput, SwitchBase, SwitchBase_default;
var init_SwitchBase = __esm({
  "node_modules/@mui/material/internal/SwitchBase.js"() {
    "use client";
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx();
    init_refType();
    init_composeClasses();
    init_capitalize();
    init_styled();
    init_useControlled();
    init_useFormControl();
    init_ButtonBase();
    init_switchBaseClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    _excluded = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
        input: ["input"]
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    SwitchBaseRoot = styled_default(ButtonBase_default)(({
      ownerState
    }) => _extends({
      padding: 9,
      borderRadius: "50%"
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }));
    SwitchBaseInput = styled_default("input", {
      shouldForwardProp: rootShouldForwardProp_default
    })({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    SwitchBase = React.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        className,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required = false,
        tabIndex,
        type,
        value
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const [checked, setCheckedState] = useControlled_default({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = useFormControl();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = _extends({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
      });
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime2.jsxs)(SwitchBaseRoot, _extends({
        component: "span",
        className: clsx_default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        tabIndex: null,
        role: void 0,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState,
        ref
      }, other, {
        children: [(0, import_jsx_runtime.jsx)(SwitchBaseInput, _extends({
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          className: classes.input,
          disabled,
          id: hasLabelFor ? id : void 0,
          name,
          onChange: handleInputChange,
          readOnly,
          ref: inputRef,
          required,
          ownerState,
          tabIndex,
          type
        }, type === "checkbox" && value === void 0 ? {} : {
          value
        }, inputProps)), checked ? checkedIcon : icon]
      }));
    });
    true ? SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: import_prop_types.default.bool,
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types.default.bool,
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: import_prop_types.default.node.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * @ignore
       */
      defaultChecked: import_prop_types.default.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: import_prop_types.default.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: import_prop_types.default.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: import_prop_types.default.oneOf(["end", "start", false]),
      /**
       * The icon to display when the component is unchecked.
       */
      icon: import_prop_types.default.node.isRequired,
      /**
       * The id of the `input` element.
       */
      id: import_prop_types.default.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: import_prop_types.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /*
       * @ignore
       */
      name: import_prop_types.default.string,
      /**
       * @ignore
       */
      onBlur: import_prop_types.default.func,
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types.default.func,
      /**
       * @ignore
       */
      onFocus: import_prop_types.default.func,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: import_prop_types.default.bool,
      /**
       * If `true`, the `input` element is required.
       */
      required: import_prop_types.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.object,
      /**
       * @ignore
       */
      tabIndex: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
      /**
       * The input component prop `type`.
       */
      type: import_prop_types.default.string.isRequired,
      /**
       * The value of the component.
       */
      value: import_prop_types.default.any
    } : void 0;
    SwitchBase_default = SwitchBase;
  }
});

// node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
var React2, import_jsx_runtime3, CheckBoxOutlineBlank_default;
var init_CheckBoxOutlineBlank = __esm({
  "node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js"() {
    "use client";
    React2 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    CheckBoxOutlineBlank_default = createSvgIcon((0, import_jsx_runtime3.jsx)("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
  }
});

// node_modules/@mui/material/internal/svg-icons/CheckBox.js
var React3, import_jsx_runtime4, CheckBox_default;
var init_CheckBox = __esm({
  "node_modules/@mui/material/internal/svg-icons/CheckBox.js"() {
    "use client";
    React3 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    CheckBox_default = createSvgIcon((0, import_jsx_runtime4.jsx)("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
  }
});

// node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
var React4, import_jsx_runtime5, IndeterminateCheckBox_default;
var init_IndeterminateCheckBox = __esm({
  "node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js"() {
    "use client";
    React4 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime5 = __toESM(require_jsx_runtime());
    IndeterminateCheckBox_default = createSvgIcon((0, import_jsx_runtime5.jsx)("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), "IndeterminateCheckBox");
  }
});

// node_modules/@mui/material/Checkbox/checkboxClasses.js
function getCheckboxUtilityClass(slot) {
  return generateUtilityClass("MuiCheckbox", slot);
}
var checkboxClasses, checkboxClasses_default;
var init_checkboxClasses = __esm({
  "node_modules/@mui/material/Checkbox/checkboxClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
    checkboxClasses_default = checkboxClasses;
  }
});

// node_modules/@mui/material/Checkbox/Checkbox.js
var React5, import_prop_types2, import_colorManipulator, import_jsx_runtime6, _excluded2, useUtilityClasses2, CheckboxRoot, defaultCheckedIcon, defaultIcon, defaultIndeterminateIcon, Checkbox, Checkbox_default;
var init_Checkbox = __esm({
  "node_modules/@mui/material/Checkbox/Checkbox.js"() {
    "use client";
    init_objectWithoutPropertiesLoose();
    init_extends();
    React5 = __toESM(require_react());
    import_prop_types2 = __toESM(require_prop_types());
    init_clsx();
    init_refType();
    init_composeClasses();
    import_colorManipulator = __toESM(require_colorManipulator());
    init_SwitchBase();
    init_CheckBoxOutlineBlank();
    init_CheckBox();
    init_IndeterminateCheckBox();
    init_capitalize();
    init_DefaultPropsProvider();
    init_styled();
    init_checkboxClasses();
    import_jsx_runtime6 = __toESM(require_jsx_runtime());
    _excluded2 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
    useUtilityClasses2 = (ownerState) => {
      const {
        classes,
        indeterminate,
        color,
        size
      } = ownerState;
      const slots = {
        root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color)}`, `size${capitalize_default(size)}`]
      };
      const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    CheckboxRoot = styled_default(SwitchBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
      name: "MuiCheckbox",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles[`color${capitalize_default(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${checkboxClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    defaultCheckedIcon = (0, import_jsx_runtime6.jsx)(CheckBox_default, {});
    defaultIcon = (0, import_jsx_runtime6.jsx)(CheckBoxOutlineBlank_default, {});
    defaultIndeterminateIcon = (0, import_jsx_runtime6.jsx)(IndeterminateCheckBox_default, {});
    Checkbox = React5.forwardRef(function Checkbox2(inProps, ref) {
      var _icon$props$fontSize, _indeterminateIcon$pr;
      const props = useDefaultProps({
        props: inProps,
        name: "MuiCheckbox"
      });
      const {
        checkedIcon = defaultCheckedIcon,
        color = "primary",
        icon: iconProp = defaultIcon,
        indeterminate = false,
        indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
        inputProps,
        size = "medium",
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = _extends({}, props, {
        color,
        indeterminate,
        size
      });
      const classes = useUtilityClasses2(ownerState);
      return (0, import_jsx_runtime6.jsx)(CheckboxRoot, _extends({
        type: "checkbox",
        inputProps: _extends({
          "data-indeterminate": indeterminate
        }, inputProps),
        icon: React5.cloneElement(icon, {
          fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
        }),
        checkedIcon: React5.cloneElement(indeterminateIcon, {
          fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
        }),
        ownerState,
        ref,
        className: clsx_default(classes.root, className)
      }, other, {
        classes
      }));
    });
    true ? Checkbox.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types2.default.bool,
      /**
       * The icon to display when the component is checked.
       * @default <CheckBoxIcon />
       */
      checkedIcon: import_prop_types2.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types2.default.object,
      /**
       * @ignore
       */
      className: import_prop_types2.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types2.default.string]),
      /**
       * The default checked state. Use when the component is not controlled.
       */
      defaultChecked: import_prop_types2.default.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types2.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       * @default false
       */
      disableRipple: import_prop_types2.default.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <CheckBoxOutlineBlankIcon />
       */
      icon: import_prop_types2.default.node,
      /**
       * The id of the `input` element.
       */
      id: import_prop_types2.default.string,
      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the `input`.
       * @default false
       */
      indeterminate: import_prop_types2.default.bool,
      /**
       * The icon to display when the component is indeterminate.
       * @default <IndeterminateCheckBoxIcon />
       */
      indeterminateIcon: import_prop_types2.default.node,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: import_prop_types2.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types2.default.func,
      /**
       * If `true`, the `input` element is required.
       * @default false
       */
      required: import_prop_types2.default.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense checkbox styling.
       * @default 'medium'
       */
      size: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["medium", "small"]), import_prop_types2.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: import_prop_types2.default.any
    } : void 0;
    Checkbox_default = Checkbox;
  }
});

// node_modules/@mui/material/Checkbox/index.js
var Checkbox_exports = {};
__export(Checkbox_exports, {
  checkboxClasses: () => checkboxClasses_default,
  default: () => Checkbox_default,
  getCheckboxUtilityClass: () => getCheckboxUtilityClass
});
var init_Checkbox2 = __esm({
  "node_modules/@mui/material/Checkbox/index.js"() {
    init_Checkbox();
    init_checkboxClasses();
    init_checkboxClasses();
  }
});

export {
  SwitchBase_default,
  init_SwitchBase,
  getCheckboxUtilityClass,
  checkboxClasses_default,
  Checkbox_default,
  Checkbox_exports,
  init_Checkbox2 as init_Checkbox
};
//# sourceMappingURL=chunk-2EQJ2KHV.js.map
